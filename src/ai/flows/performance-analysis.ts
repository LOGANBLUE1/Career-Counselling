// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for analyzing student performance on practice tests and identifying areas of weakness.
 *
 * - performanceAnalysis - A function that initiates the performance analysis flow.
 * - PerformanceAnalysisInput - The input type for the performanceAnalysis function.
 * - PerformanceAnalysisOutput - The output type for the performanceAnalysis function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const PerformanceAnalysisInputSchema = z.object({
  testName: z.string().describe('The name of the practice test.'),
  studentAnswers: z.string().describe('The student provided answers for the test questions.'),
  correctAnswers: z.string().describe('The correct answers for the test questions.'),
  examType: z.enum(['JEE', 'NEET']).describe('The type of exam (JEE or NEET).'),
});
export type PerformanceAnalysisInput = z.infer<typeof PerformanceAnalysisInputSchema>;

const PerformanceAnalysisOutputSchema = z.object({
  weaknesses: z.array(z.string()).describe('Areas of weakness identified in the student performance.'),
  suggestedResources: z.array(z.string()).describe('Targeted resources to improve specific skills.'),
  practiceQuestions: z.array(z.string()).describe('Practice questions to focus on areas of weakness.'),
});
export type PerformanceAnalysisOutput = z.infer<typeof PerformanceAnalysisOutputSchema>;

export async function performanceAnalysis(input: PerformanceAnalysisInput): Promise<PerformanceAnalysisOutput> {
  return performanceAnalysisFlow(input);
}

const prompt = ai.definePrompt({
  name: 'performanceAnalysisPrompt',
  input: {
    schema: z.object({
      testName: z.string().describe('The name of the practice test.'),
      studentAnswers: z.string().describe('The student provided answers for the test questions.'),
      correctAnswers: z.string().describe('The correct answers for the test questions.'),
      examType: z.enum(['JEE', 'NEET']).describe('The type of exam (JEE or NEET).'),
    }),
  },
  output: {
    schema: z.object({
      weaknesses: z.array(z.string()).describe('Areas of weakness identified in the student performance.'),
      suggestedResources: z.array(z.string()).describe('Targeted resources to improve specific skills.'),
      practiceQuestions: z.array(z.string()).describe('Practice questions to focus on areas of weakness.'),
    }),
  },
  prompt: `You are an AI performance analyst for {{examType}} exams. Analyze the student\'s performance on the practice test and identify areas of weakness. Provide targeted resources and practice questions to improve their skills.

Test Name: {{{testName}}}
Student Answers: {{{studentAnswers}}}
Correct Answers: {{{correctAnswers}}}

Weaknesses: 
Suggested Resources:
Practice Questions:`,
});

const performanceAnalysisFlow = ai.defineFlow<
  typeof PerformanceAnalysisInputSchema,
  typeof PerformanceAnalysisOutputSchema
>(
  {
    name: 'performanceAnalysisFlow',
    inputSchema: PerformanceAnalysisInputSchema,
    outputSchema: PerformanceAnalysisOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
